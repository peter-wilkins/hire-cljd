(ns acme.main
    (:require
      ["package:flutter/material.dart" :as m]
      ["package:table_calendar/table_calendar.dart" :as c]
      ["package:intl/intl.dart" :as i]
      [cljd.flutter :as f]))

; find kit - dropdown - default all
; display - calendar widget
; select time widget


; find kit available at a time slot
; find timeslot for a bit of kit
;

(defonce app-state (atom {:kit ["any" "fanatic" "gong" "levitaz" "axis 1150" "axis 980" "windfoil"]
                          :selected-kit "any"
                          :selected-day (DateTime.now)
                          :booked nil}))

(defn main []
      (f/run
        m/MaterialApp
        .home
        (m/Scaffold .appBar (m/AppBar .title (m/Text "Wing-a-majig")))
        .body
        (m/Column
          .children
          [(m/Row
             .mainAxisAlignment m/MainAxisAlignment.center
             .children
             [(m/Text "Selected foil: "
                      .style (m/TextStyle
                               .color m.Colors/red
                               .fontSize 22.0))

              (f/widget
                :watch [{:keys [kit selected-kit]} app-state]
                (m/DropdownButton
                  .value selected-kit
                  .onChanged (fn [v]
                                 (swap! app-state assoc :selected-kit v))
                  .items (into [] (map #(m/DropdownMenuItem .value % .child (m/Text %))) kit)))

              (f/widget
                :watch [{:keys [selected-day]} app-state]
                :let [df (i/DateFormat "yyyy-MM-dd")]
                (m/Text (str "Selected day: " (.format df selected-day))
                        .style (m/TextStyle
                                 .color m.Colors/blue
                                 .fontSize 22.0)))])

           (f/widget
             :watch [{:keys [selected-day]} app-state]
             (c/TableCalendar
             .firstDay (DateTime.now)
             .lastDay (.add (DateTime.now) (Duration .days 7))
             .focusedDay selected-day
             .selectedDayPredicate (fn [day] (= day selected-day))
             .onDaySelected (fn [selectedDay focusedDay]
                                (println selectedDay, focusedDay)
                                (swap! app-state assoc :selected-day selectedDay))))])))

;final DateFormat formatter = DateFormat('yyyy-MM-dd');
;  final String formatted = formatter.format(now);